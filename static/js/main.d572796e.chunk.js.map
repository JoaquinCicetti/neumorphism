{"version":3,"sources":["utils/index.ts","utils/Color.ts","utils/colorGeneration.ts","theme/ThemeContext.tsx","theme/useTheme.ts","components/Logo/Logo.tsx","components/ColorPicker/ColorPicker.tsx","components/Container/Container.tsx","components/RadioButton/RadioButton.tsx","components/Slider/Slider.tsx","components/TextInput/TextInput.tsx","utils/useTimeout.ts","components/Playground/Playground.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validateNumber","value","TypeError","validateRange","min","max","validateWithKey","key","Shapes","Color","r","g","b","a","this","toString","length","s","l","cmin","Math","cmax","delta","h","round","abs","hsla","fromHSLA","opacity","percent","color","hex","result","exec","parseInt","saturation","lightness","hue","c","x","m","alpha","amount","huedelta","trunc","Array","map","_","index","rgba","shapes","Object","values","generateShadow","params","elevation","inverted","lighterColor","fromRGBA","lighten","darkerColor","darken","offsetL","offsetD","blurRadius","lightShadow","darkShadow","generateColorFromString","text","intHash","from","reduce","hash","char","charCodeAt","generateTheme","defaultAccent","defaultBackground","rgbaColor","complementary","desaturate","generateBackgroundColor","background","bgColor","generateReadableFontColor","accent","defaultTheme","fromHEX","defaultContext","theme","setAccent","newColor","console","warn","Context","React","createContext","Provider","props","useState","setTheme","newTheme","children","useTheme","useContext","getBackground","shape","FLAT","hexColor","shortHex","generateFlatBackground","CONVEX","to","generateConvexBackground","CONCAVE","generateConcaveBackground","Logo","accentColor","boxShadow","animatedStyles","useSpring","div","className","style","ColorPicker","containerStyles","inputStyles","type","onChange","event","target","newValue","Container","isFake","fontColor","borderColor","RadioButton","options","radioButtonName","join","option","isSelected","name","Option","selectedShadow","unselectedShadow","activeColor","inactiveColor","activeIndicatorStyles","width","id","label","htmlFor","aria-label","Slider","step","invertedBoxShadow","TextInput","onTextChange","useTimeout","callback","args","delay","savedCallback","useRef","useEffect","current","setTimeout","clearTimeout","defaultShape","Playground","setBrand","setElevation","setShape","setText","appStyles","newText","newAccent","newShape","newElevation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4VAMO,SAASA,EAAeC,GAC3B,GAAqB,kBAAVA,EACP,MAAM,IAAIC,UAAU,yBAIrB,SAASC,EAAcF,EAAeG,EAAaC,GACtD,GAAIJ,EAAQG,GAAOH,EAAQI,EACvB,MAAM,IAAIH,UAAU,yBAgBrB,SAASI,EACZC,EACAN,GAEA,KAAMM,KAAON,GACT,MAAM,IAAIC,UAAJ,sBAA6BK,IChBpC,ICQKC,EDRCC,EAAb,WACI,WACqBC,EACAC,EACAC,EACAC,GAClB,yBAJkBH,IAInB,KAHmBC,IAGnB,KAFmBC,IAEnB,KADmBC,IALzB,qCAsEI,WACI,IAAIH,EAAII,KAAKJ,EAAEK,SAAS,IACpBJ,EAAIG,KAAKH,EAAEI,SAAS,IACpBH,EAAIE,KAAKF,EAAEG,SAAS,IACpBF,GAAc,IAATC,KAAKD,GAASE,SAAS,IAOhC,OALiB,IAAbL,EAAEM,SAAcN,EAAI,IAAMA,GACb,IAAbC,EAAEK,SAAcL,EAAI,IAAMA,GACb,IAAbC,EAAEI,SAAcJ,EAAI,IAAMA,GACb,IAAbC,EAAEG,SAAcH,EAAI,IAAMA,GAEvB,IAAMH,EAAIC,EAAIC,EAAIC,IAjFjC,oBAwFI,WACI,IAAIH,EAAII,KAAKJ,EAAEK,SAAS,IACpBJ,EAAIG,KAAKH,EAAEI,SAAS,IACpBH,EAAIE,KAAKF,EAAEG,SAAS,IAMxB,OAJiB,IAAbL,EAAEM,SAAcN,EAAI,IAAMA,GACb,IAAbC,EAAEK,SAAcL,EAAI,IAAMA,GACb,IAAbC,EAAEI,SAAcJ,EAAI,IAAMA,GAEvB,IAAMF,EAAIC,EAAIC,IAjG7B,gBAoGI,WACI,MAAO,CACHF,EAAGI,KAAKJ,EACRC,EAAGG,KAAKH,EACRC,EAAGE,KAAKF,EACRC,EAAGC,KAAKD,KAzGpB,gBA6GI,WACI,IASII,EACAC,EAVER,EAAII,KAAKJ,EAAI,IACbC,EAAIG,KAAKH,EAAI,IACbC,EAAIE,KAAKF,EAAI,IAEbO,EAAOC,KAAKhB,IAAIM,EAAGC,EAAGC,GACtBS,EAAOD,KAAKf,IAAIK,EAAGC,EAAGC,GACtBU,EAAQD,EAAOF,EAEjBI,EAAI,EA4BR,OAtBIA,EADU,IAAVD,EACI,EACGD,IAASX,GACVC,EAAIC,GAAKU,EAAS,EACjBD,IAASV,GACXC,EAAIF,GAAKY,EAAQ,GAEjBZ,EAAIC,GAAKW,EAAQ,GAG1BC,EAAIH,KAAKI,MAAU,GAAJD,IAGP,IACJA,GAAQ,KAIZL,GAAKG,EAAOF,GAAQ,EAGpBF,EAAc,IAAVK,EAAc,EAAIA,GAAS,EAAIF,KAAKK,IAAI,EAAIP,EAAI,IAE7C,CACHK,IACAN,EAAGG,KAAKI,MAAU,IAAJP,GACdC,EAAGE,KAAKI,MAAU,IAAJN,MArJ1B,yBAyJI,WAA4B,IAAD,EACAJ,KAAKY,KAApBH,EADe,EACfA,EAAGN,EADY,EACZA,EAAGC,EADS,EACTA,EAAGL,EADM,EACNA,EACjB,OAAOJ,EAAMkB,SAASJ,EAAI,IAAKN,EAAGC,EAAGL,KA3J7C,qBA8JI,SAAQe,GAGJ,OAFAzB,EAAcyB,EAAS,EAAG,GAEnB,IAAInB,EAAMK,KAAKJ,EAAGI,KAAKH,EAAGG,KAAKF,EAAGgB,KAjKjD,qBAoKI,SAAQC,GACJ1B,EAAc0B,EAAS,EAAG,KADE,MAGRf,KAAKY,KAAjBH,EAHoB,EAGpBA,EAAGN,EAHiB,EAGjBA,EAAGJ,EAHc,EAGdA,EACRK,EAAIE,KAAKhB,IAAI,IAAKU,KAAKY,KAAKR,EAAIW,GAEtC,OAAOpB,EAAMkB,SAASJ,EAAGN,EAAGC,EAAGL,KA1KvC,oBA6KI,SAAOgB,GACH1B,EAAc0B,EAAS,EAAG,KADC,MAGPf,KAAKY,KAAjBH,EAHmB,EAGnBA,EAAGN,EAHgB,EAGhBA,EAAGJ,EAHa,EAGbA,EACRK,EAAIE,KAAKf,IAAI,EAAGS,KAAKY,KAAKR,EAAIW,GAEpC,OAAOpB,EAAMkB,SAASJ,EAAGN,EAAGC,EAAGL,KAnLvC,sBAsLI,SAASgB,GACL1B,EAAc0B,EAAS,EAAG,KADG,MAGTf,KAAKY,KAAjBH,EAHqB,EAGrBA,EAAGL,EAHkB,EAGlBA,EAAGL,EAHe,EAGfA,EACRI,EAAIG,KAAKhB,IAAI,IAAKU,KAAKY,KAAKT,EAAIY,GAEtC,OAAOpB,EAAMkB,SAASJ,EAAGN,EAAGC,EAAGL,KA5LvC,wBA+LI,SAAWgB,GACP1B,EAAc0B,EAAS,EAAG,KADK,MAGXf,KAAKY,KAAjBH,EAHuB,EAGvBA,EAAGL,EAHoB,EAGpBA,EAAGL,EAHiB,EAGjBA,EACRI,EAAIG,KAAKf,IAAI,EAAGS,KAAKY,KAAKT,EAAIY,GAEpC,OAAOpB,EAAMkB,SAASJ,EAAGN,EAAGC,EAAGL,MArMvC,uBAQI,SAAgBiB,GAA0B,IAAD,EACrC,OAAO,IAAIrB,EAAMqB,EAAMpB,EAAGoB,EAAMnB,EAAGmB,EAAMlB,EAAlC,UAAqCkB,EAAMjB,SAA3C,QAAgD,KAT/D,qBAYI,SAAekB,GAAqB,IAAD,EACzBC,EAAS,yDAAyDC,KAAKF,GAE7E,GAAe,OAAXC,EAAiB,MAAM,IAAI9B,UAAJ,sBAA6B6B,IACxD,OAAO,IAAItB,EACPyB,SAASF,EAAO,GAAI,IACpBE,SAASF,EAAO,GAAI,IACpBE,SAASF,EAAO,GAAI,IACpBE,SAAQ,UAACF,EAAO,UAAR,QAAc,KAAM,OApBxC,sBAwBI,SAAgBT,EAAWN,EAAWC,EAAWL,GAE7C,IAAMsB,EAAalB,EAAI,IACjBmB,EAAYlB,EAAI,IAChBmB,EAAMd,EAAI,IAEVe,GAAK,EAAIlB,KAAKK,IAAI,EAAIW,EAAY,IAAMD,EACxCI,EAAID,GAAK,EAAIlB,KAAKK,IAAMY,EAAM,GAAM,EAAK,IACzCG,EAAIJ,EAAYE,EAAI,EACtB5B,EAAI,EACJC,EAAI,EACJC,EAAI,EAgCR,OA9BI,GAAKyB,GAAOA,EAAM,IAClB3B,EAAI4B,EACJ3B,EAAI4B,EACJ3B,EAAI,GACG,IAAMyB,GAAOA,EAAM,KAC1B3B,EAAI6B,EACJ5B,EAAI2B,EACJ1B,EAAI,GACG,KAAOyB,GAAOA,EAAM,KAC3B3B,EAAI,EACJC,EAAI2B,EACJ1B,EAAI2B,GACG,KAAOF,GAAOA,EAAM,KAC3B3B,EAAI,EACJC,EAAI4B,EACJ3B,EAAI0B,GACG,KAAOD,GAAOA,EAAM,KAC3B3B,EAAI6B,EACJ5B,EAAI,EACJC,EAAI0B,GACG,KAAOD,GAAOA,EAAM,MAC3B3B,EAAI4B,EACJ3B,EAAI,EACJC,EAAI2B,GAOD,IAAI9B,EAJXC,EAAIU,KAAKI,MAAgB,KAATd,EAAI8B,IACpB7B,EAAIS,KAAKI,MAAgB,KAATb,EAAI6B,IACpB5B,EAAIQ,KAAKI,MAAgB,KAATZ,EAAI4B,IAEb,OAAmB3B,QAAnB,IAAmBA,IAAK,KAnEvC,0BAwMI,SAAoBiB,GAChBxB,EAAgB,IAAKwB,GACrBxB,EAAgB,IAAKwB,GACrBxB,EAAgB,IAAKwB,GACrBxB,EAAgB,IAAKwB,GAJuC,IAKpDpB,EAAeoB,EAAfpB,EAAGC,EAAYmB,EAAZnB,EAAGC,EAASkB,EAATlB,EAAGC,EAAMiB,EAANjB,EAEjBb,EAAeU,GACfV,EAAeW,GACfX,EAAeY,GACfZ,EAAea,GAEfV,EAAcO,EAAG,EAAG,KACpBP,EAAcQ,EAAG,EAAG,KACpBR,EAAcS,EAAG,EAAG,KACpBT,EAAcU,EAAG,EAAG,KAvN5B,0BA0NI,SAAoBiB,GAChBxB,EAAgB,IAAKwB,GACrBxB,EAAgB,IAAKwB,GACrBxB,EAAgB,IAAKwB,GAHuC,IAIpDP,EAAYO,EAAZP,EAAGN,EAASa,EAATb,EAAGC,EAAMY,EAANZ,EAEdlB,EAAeuB,GACfvB,EAAeiB,GACfjB,EAAekB,GAEff,EAAcoB,EAAG,EAAG,KACpBpB,EAAcc,EAAG,EAAG,KACpBd,EAAce,EAAG,EAAG,OAtO5B,iCAyOI,SAA2BiB,EAAoBC,EAAmBK,EAAeC,GAC7E,IAAMC,EAAmBvB,KAAKwB,MAAM,IAAMF,GAE1C,OAAO,YAAI,IAAIG,MAAMH,IAASI,KAAI,SAACC,EAAQC,GACvC,IAAMX,EAAMW,EAAQL,EACpB,OAAOlC,EAAMkB,SAASU,EAAKF,EAAYC,GAAWa,YA9O9D,M,SCQYzC,K,gBAAAA,E,kBAAAA,E,aAAAA,M,KAML,IAAM0C,EAASC,OAAOC,OAAO5C,GAavB6C,EAAkC,SAACC,GAAY,IAChDxB,EAA+BwB,EAA/BxB,MAAOyB,EAAwBD,EAAxBC,UAAWC,EAAaF,EAAbE,SAEpBC,EAAehD,EAAMiD,SAAS5B,GAAO6B,QAAQ,IAAI/B,QAAQ,IAAKG,IAC9D6B,EAAcnD,EAAMiD,SAAS5B,GAAO+B,OAAO,IAAIjC,QAAQ,IAAKG,IAE5D+B,GAAW,EAAI1C,KAAKK,IAAI8B,GAlClB,EAmCNQ,EAnCM,EAmCI3C,KAAKK,IAAI8B,GAEnBS,EAAa5C,KAAKK,IApCT,IAoCa8B,EArChB,GAuCNU,EAAW,UAAMH,EAAN,cAAmBA,EAAnB,cAAgCE,EAAhC,cAAgDP,GAC3DS,EAAU,UAAMH,EAAN,cAAmBA,EAAnB,cAAgCC,EAAhC,cAAgDJ,GAEhE,OAAOJ,EAAQ,gBAAYS,EAAZ,mBAAkCC,GAAlC,UAAoDD,EAApD,aAAoEC,IA2C1EC,EAAkD,SAACC,GAC5D,IAAMC,EAAUxB,MAAMyB,KAAKF,GAAMG,QAAO,SAACC,EAAcC,GACnD,OAAOA,EAAKC,WAAW,KAAOF,GAAQ,GAAKA,KAC5C,GAOH,OAFuB,IAAI/D,EAHhB4D,GAAW,EAAK,IAChBA,GAAW,GAAM,IACjBA,GAAW,GAAM,IACc,KAEpBpB,M,OCtGpB0B,EAAgC,SAAC7C,GACnC,IAAM8C,EAA2B9C,EAC3B+C,ED4DuD,SAACC,GAC9D,IAAMhD,EAAQrB,EAAMiD,SAASoB,GAAWC,cAExC,OAAIjD,EAAMJ,KAAKR,GAAK,GACTY,EAAM+B,OAAO,IAAImB,WAAW,IAAI/B,KAGpCnB,EAAM6B,QAAQ,IAAIqB,WAAW,IAAI/B,KCnEHgC,CAAwBL,GAG7D,MAAO,CACHM,WAAYL,EACZT,KD6CqD,SAACU,GAC1D,IAAMK,EAAU1E,EAAMiD,SAASoB,GAAWC,cAE1C,OAAII,EAAQzD,KAAKR,GAAK,GACXiE,EAAQxB,QAAQ,IAAIV,KAGxBkC,EAAQtB,OAAO,IAAIZ,KCxDKmC,CAA0BP,GAKrDQ,OAAQT,IAIVU,EAAsBX,EAAclE,EAAM8E,QAAQ,WAAWtC,MAO7DuC,EAA+B,CACjCC,MAAOH,EACPI,UAAW,SAACC,GAAD,OAAyBC,QAAQC,KAAK,4BAGxCC,EAAUC,IAAMC,cAA4BR,GAE5CS,EAAqB,SAACC,GAAW,IAAD,EACfH,IAAMI,SAAgBb,GADP,mBAClCG,EADkC,KAC3BW,EAD2B,KASnCnG,EAAQ,CACVwF,QACAC,UARc,SAACC,GACf,IAAMU,EAAW1B,EAAcgB,GAE/BS,EAASC,KAOb,OAAO,cAACP,EAAQG,SAAT,CAAkBhG,MAAOA,EAAzB,SAAiCiG,EAAMI,YC/CrCC,EAAW,WACpB,OAAOR,IAAMS,WAAWV,I,QCatBW,G,MAAgB,SAACC,EAAevB,GAClC,OAAQuB,GACJ,KAAKlG,EAAOmG,KACR,OH+DuD,SAAC7B,GAChE,IAAM8B,EAAWnG,EAAMiD,SAASoB,GAAW+B,SAE3C,MAAM,yBAAN,OAAgCD,EAAhC,aAA6CA,EAA7C,KGlEeE,CAAuB3B,GAElC,KAAK3E,EAAOuG,OACR,OHkEyD,SAACjC,GAClE,IAAMR,EAAO7D,EAAMiD,SAASoB,GAAWjB,OAAO,IACxCmD,EAAKvG,EAAMiD,SAASoB,GAAWnB,QAAQ,IAE7C,MAAM,2BAAN,OAAkCW,EAAKuC,SAAvC,aAAoDG,EAAGH,UGtExCI,CAAyB9B,GAEpC,KAAK3E,EAAO0G,QACR,OHsE0D,SAACpC,GACnE,IAAMR,EAAO7D,EAAMiD,SAASoB,GAAWjB,OAAO,IACxCmD,EAAKvG,EAAMiD,SAASoB,GAAWnB,QAAQ,IAE7C,MAAM,2BAAN,OAAkCW,EAAKuC,SAAvC,aAAoDG,EAAGH,UG1ExCM,CAA0BhC,GAErC,QACIS,QAAQC,KAAK,4BAIrB,MAAO,KAGEuB,EAA4B,SAAClB,GAAW,IACzCQ,EAAUR,EAAVQ,MACAjB,EAAUc,IAAVd,MAEF4B,EAAc5G,EAAMiD,SAAS+B,EAAMJ,QACnCF,EAAU1E,EAAMiD,SAAS+B,EAAMP,YAE/BoC,EAAYjE,EAAe,CAAEvB,MAAOqD,EAAQlC,KAAMM,UAAW,IAE7D2B,EAAauB,EAAcC,EAAOvB,EAAQlC,MAC1CsE,EAAiBC,oBAAU,CAC7BR,GAAI,CACA9B,aACAoC,YACAxF,MAAOuF,EAAYR,YAG3B,OACI,eAAC,WAASY,IAAV,CAAcC,UAAU,OAAOC,MAAOJ,EAAtC,UACI,oBAAIG,UAAU,QAAd,yBACA,uBAAOA,UAAU,WAAjB,0BC9CCE,G,MAA0C,SAAC1B,GAAW,IACvDjG,EAAUiG,EAAVjG,MACAwF,EAAUc,IAAVd,MAQF6B,EAAYjE,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,EAAGC,UAAU,IAG9EqE,EAAkB,CACpBP,UAHsBjE,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,EAAGC,UAAU,KAMtFsE,EAAc,CAChB5C,WAAYzE,EAAMiD,SAAS+B,EAAMP,YAAY2B,SAC7C,OAAQpG,EAAMiD,SAAS+B,EAAMP,YAAY2B,SACzC,cAAeS,GAInB,OAAO,qBAAKI,UAAU,cAAcC,MAAOE,EAApC,SACH,uBACIE,KAAK,QACLC,SAvBS,SAACC,GACd,IAAMC,EAASD,EAAMC,OACfC,EAAW1H,EAAM8E,QAAQ2C,EAAOjI,OAAOgD,KAC7CiD,EAAM8B,SAASG,IAqBXlI,MAAOQ,EAAMiD,SAASzD,GAAO4G,SAC7Bc,MAAOG,QCzBNM,G,MAAsC,SAAClC,GAAW,IACnD3C,EAAgC2C,EAAhC3C,UAAWC,EAAqB0C,EAArB1C,SAAU6E,EAAWnC,EAAXmC,OACrB5C,EAAUc,IAAVd,MAEFN,EAAU1E,EAAMiD,SAAS+B,EAAMP,YAC/BoD,EAAY7H,EAAMiD,SAAS+B,EAAMrB,MAEjCE,EAAOjB,EAAe,CAAEvB,MAAOqD,EAAQlC,KAAMO,WAAUD,UAAW,IAClEyD,EAAK3D,EAAe,CAAEvB,MAAOqD,EAAQlC,KAAMM,YAAWC,aAEtD+D,EAAiBC,oBAAU,CAC7BlD,KAAM,CACFgD,UAAWhD,EACXY,WAAYC,EAAQ0B,SACpB0B,YAAapD,EAAQ0B,SACrB/E,MAAOwG,EAAUzB,UAErBG,GAAI,CACAM,UAAWN,EACX9B,WAAYC,EAAQ0B,SACpB0B,YAAapD,EAAQ0B,SACrB/E,MAAOwG,EAAUzB,YAInBa,EAAYxB,EAAMwB,UAAN,oBACCxB,EAAMwB,WACnB,YAEN,OACI,cAAC,WAASD,IAAV,CAAcE,MAAOJ,EAAgBG,UAAWA,EAAhD,SAEQW,EACM,uBAAMX,UAAU,OAAhB,UACE,4CADF,IACsBV,KAEtBd,EAAMI,aCtCfkC,G,MAA0C,SAACtC,GAAW,IACvDjG,EAAmBiG,EAAnBjG,MAAOwI,EAAYvC,EAAZuC,QACPhD,EAAUc,IAAVd,MAQFoC,EAAkB,CACpBP,UAAWjE,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,EAAGC,UAAU,KAI3EkF,EAAkBD,EAAQE,KAAK,KACrC,OACI,qBAAKjB,UAAU,QAAQC,MAAOE,EAAiBG,SAblC,SAACC,GACd,IACME,EADSF,EAAMC,OACGjI,MACxBiG,EAAM8B,SAASG,IAUf,SACKM,EAAQ3F,KAAI,SAAC8F,EAAQ5F,GAClB,IAAMzC,EAAG,UAAMqI,EAAN,YAAgB5F,GAEzB,OAAO,cAAC,EAAD,CAAkB/C,MAAO2I,EAAQC,WAAYD,IAAW3I,EAAO6I,KAAMJ,GAAxDnI,UAY9BwI,EAAgC,SAAC7C,GAAW,IACtCjG,EAA4BiG,EAA5BjG,MAAO6I,EAAqB5C,EAArB4C,KAAMD,EAAe3C,EAAf2C,WACbpD,EAAUc,IAAVd,MAEFuD,EAAiB3F,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,IACtE0F,EAAmB5F,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,IAExE2F,EAAczI,EAAMiD,SAAS+B,EAAMJ,QAAQwB,SAC3CsC,EAAgB1I,EAAMiD,SAAS+B,EAAMrB,MAAMyC,SAE3CU,EAAiBC,oBAAU,CAC7BR,GAAI,CACAM,UAAWuB,EAAaG,EAAiBC,EACzCnH,MAAO+G,EAAaK,EAAcC,KAIpCC,EAAwB5B,oBAAU,CACpCR,GAAI,CACAqC,MAAOR,EAAa,OAAS,MAC7BN,YAAaW,KAIfI,EAAE,sBAAkBrJ,GAE1B,OACI,eAAC,WAASsJ,MAAV,CAAgB5B,MAAOJ,EAAgBG,UAAW,SAAU8B,QAASF,EAArE,UACI,uBAAOA,GAAIA,EAAIvB,KAAK,QAAQ0B,aAAYxJ,EAAOA,MAAOA,EAAO6I,KAAMA,IAClED,GAAc,cAAC,WAASpB,IAAV,CAAcE,MAAOyB,EAAuB1B,UAAU,oBACrE,+BACKzH,QC/DJyJ,G,MAAgC,SAACxD,GAAW,IAC7CjG,EAA8BiG,EAA9BjG,MAAOI,EAAuB6F,EAAvB7F,IAAKD,EAAkB8F,EAAlB9F,IADgC,EACd8F,EAAbyD,YAD2B,MACpB,EADoB,EAE5ClE,EAAUc,IAAVd,MAQF6B,EAAYjE,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,EAAGC,UAAU,IAC9EoG,EAAoBvG,EAAe,CAAEvB,MAAO2D,EAAMP,WAAY3B,UAAW,EAAGC,UAAU,IAEtFqE,EAAkB,CACpBU,YAAa9H,EAAMiD,SAAS+B,EAAMJ,QAAQwB,UAGxCiB,EAAc,CAChBR,UAAWsC,EACX1E,WAAYzE,EAAMiD,SAAS+B,EAAMP,YAAY2B,SAC7C,OAAQpG,EAAMiD,SAAS+B,EAAMrB,MAAMyC,SACnC,cAAeS,GAGnB,OAAO,qBAAKI,UAAU,SAASC,MAAOE,EAA/B,SACH,uBACIE,KAAK,QACLC,SAvBS,SAACC,GACd,IAAMC,EAASD,EAAMC,OACfC,EAAWjG,SAASgG,EAAOjI,OACjCiG,EAAM8B,SAASG,IAqBXlI,MAAOA,EACP0H,MAAOG,EACPzH,IAAKA,EACLD,IAAKA,EACLuJ,KAAMA,QCjCLE,G,MAAsC,SAAC3D,GAAW,IACnDjG,EAAwBiG,EAAxBjG,MAAO6J,EAAiB5D,EAAjB4D,aACPrE,EAAUc,IAAVd,MAeFqC,EAAc,CAChBR,UANcjE,EAAe,CAC7BvB,MAAO2D,EAAMP,WACb3B,UAAW,EACXC,UAAU,IAIV0B,WAAYzE,EAAMiD,SAAS+B,EAAMP,YAAY2B,SAC7C/E,MAAOrB,EAAMiD,SAAS+B,EAAMrB,MAAMyC,SAClC,WAAYpG,EAAMiD,SAAS+B,EAAMJ,QAAQwB,UAI7C,OAAO,uBACHkB,KAAK,OACLC,SAvBa,SAACC,GACd,IACME,EADSF,EAAMC,OACGjI,MAExBkE,EAAwBgE,GACxB2B,EAAa3B,IAmBblI,MAAOA,EACP0H,MAAOG,EACPJ,UAAU,gBCxBHqC,G,MAdI,SAACC,EAAyBC,EAAWC,GACpD,IAAMC,EAAgBC,iBAAOJ,GAE7BK,qBAAU,WACNF,EAAcG,QAAUN,IACzB,CAACA,IAEJK,qBAAU,WACN,IAAMf,EAAKiB,YAAW,kBAAMJ,EAAcG,QAAQL,KAAOC,GAEzD,OAAO,kBAAMM,aAAalB,MAC3B,CAACY,EAAOD,MCFTQ,EAAevH,EAAO,GACfwH,EAAa,WAAO,IAAD,EACWnE,IAA/Bd,EADoB,EACpBA,MAAkBkF,EADE,EACbjF,UADa,EAGMK,IAAMI,SAAiB,GAH7B,mBAGrB5C,EAHqB,KAGVqH,EAHU,OAIF7E,IAAMI,SAAiBsE,GAJrB,mBAIrB/D,EAJqB,KAIdmE,EAJc,OAKJ9E,IAAMI,SAAiB,gBALnB,mBAKrB/B,EALqB,KAKf0G,EALe,KAyBtBC,EAAY,CACd7F,WAAYzE,EAAMiD,SAAS+B,EAAMP,YAAY2B,SAC7C/E,MAAOrB,EAAMiD,SAAS+B,EAAMrB,MAAMyC,UAWtC,OAFAkD,GALoB,SAACiB,GACjB,IAAMC,EAAuB9G,EAAwB6G,GACrDL,EAASM,KAGW7G,EAAM,KAG1B,sBAAKsD,UAAU,aAAaC,MAAOoD,EAAnC,UAEI,cAAC,EAAD,CAAMrE,MAAOA,IACb,eAAC,EAAD,CAAWnD,UAAW,EAAGC,UAAQ,EAAjC,UAEI,8BACI,6CACA,kEAEJ,cAAC,EAAD,CAAaiF,QAASvF,EAAQjD,MAAOyG,EAAOsB,SA3BlC,SAACkD,GACnBL,EAASK,MA4BD,uBAAM,uBAEN,8BACI,6CACA,4DAEJ,cAAC,EAAD,CAAajL,MAAOwF,EAAMJ,OAAQ2C,SA7CxB,SAACrC,GACnBgF,EAASlK,EAAMiD,SAASiC,GAAU1C,SA8C1B,uBAAM,uBAEN,8BACI,2CACA,wEAEJ,cAAC,EAAD,CAAWhD,MAAOmE,EAAM0F,aAjDf,SAACkB,GAClBF,EAAQE,MAkDA,uBAAM,uBAEN,8BACI,uCACA,yFAEJ,cAAC,EAAD,CAAQrB,KAAM,EAAGvJ,IAAK,EAAGC,IAAK,EAAGJ,MAAOsD,EAAWyE,SAjErC,SAACmD,GACvBP,EAAaO,MAkEL,uBAAM,uBAEN,0CACA,cAAC,EAAD,CAAW5H,UAAWA,EAAW8E,QAAM,IAEvC,uBAAM,uBAEN,oDACA,cAAC,EAAD,CAAW9E,UAAWA,EAAWC,UAAQ,EAAC6E,QAAM,WCnFjD+C,G,MARc,WACzB,OACI,cAAC,EAAD,UACI,cAAC,EAAD,QCMGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d572796e.chunk.js","sourcesContent":["export function validateBoolean(value: unknown): asserts value is boolean {\n    if (typeof value !== 'boolean') {\n        throw new TypeError('Value is not a number');\n    }\n}\n\nexport function validateNumber(value: unknown): asserts value is number {\n    if (typeof value !== 'number') {\n        throw new TypeError('Value is not a number');\n    }\n}\n\nexport function validateRange(value: number, min: number, max: number): asserts value is number {\n    if (value < min || value > max) {\n        throw new TypeError('Value is not in range');\n    }\n}\n\nexport function validateString(value: unknown): asserts value is string {\n    if (typeof value !== 'string') {\n        throw new TypeError('Value is not a string');\n    }\n}\n\nexport function validateArray(value: unknown): asserts value is Array<unknown> {\n    if (!Array.isArray(value)) {\n        throw new TypeError('Value is not an array');\n    }\n}\n\nexport function validateWithKey<Key extends PropertyKey, T>(\n    key: Key,\n    value: T\n): asserts value is T & { [P in Key]: unknown } {\n    if (!(key in value)) {\n        throw new TypeError(`Missing key ${key}`);\n    }\n}\n\nexport function validateNotNil<T>(value: T | null | undefined): asserts value is T {\n    if (value === null || value === undefined) {\n        throw new TypeError('Value is nil');\n    }\n}\n","import { validateNumber, validateRange, validateWithKey } from './';\n\nexport type RGBAColor = {\n    r: number;\n    g: number;\n    b: number;\n    a?: number;\n};\n\nexport type HSLAColor = {\n    h: number;\n    s: number;\n    l: number;\n    a?: number;\n};\n\n/**\n * All values r, g, b & a must be between [0, 255]\n */\nexport class Color {\n    constructor(\n        private readonly r: number,\n        private readonly g: number,\n        private readonly b: number,\n        private readonly a: number\n    ) {}\n\n    static fromRGBA(color: RGBAColor): Color {\n        return new Color(color.r, color.g, color.b, color.a ?? 1);\n    }\n\n    static fromHEX(hex: string): Color {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i.exec(hex);\n\n        if (result === null) throw new TypeError(`Invalid hex ${hex}`);\n        return new Color(\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16),\n            parseInt(result[4] ?? 'FF', 16)\n        );\n    }\n\n    static fromHSLA(h: number, s: number, l: number, a?: number): Color {\n        // Must be fractions of 1\n        const saturation = s / 100;\n        const lightness = l / 100;\n        const hue = h % 360;\n\n        const c = (1 - Math.abs(2 * lightness - 1)) * saturation;\n        const x = c * (1 - Math.abs(((hue / 60) % 2) - 1));\n        const m = lightness - c / 2;\n        let r = 0,\n            g = 0,\n            b = 0;\n\n        if (0 <= hue && hue < 60) {\n            r = c;\n            g = x;\n            b = 0;\n        } else if (60 <= hue && hue < 120) {\n            r = x;\n            g = c;\n            b = 0;\n        } else if (120 <= hue && hue < 180) {\n            r = 0;\n            g = c;\n            b = x;\n        } else if (180 <= hue && hue < 240) {\n            r = 0;\n            g = x;\n            b = c;\n        } else if (240 <= hue && hue < 300) {\n            r = x;\n            g = 0;\n            b = c;\n        } else if (300 <= hue && hue < 360) {\n            r = c;\n            g = 0;\n            b = x;\n        }\n\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n\n        return new Color(r, g, b, a ?? 1);\n    }\n\n    get hex(): string {\n        let r = this.r.toString(16);\n        let g = this.g.toString(16);\n        let b = this.b.toString(16);\n        let a = (this.a * 255).toString(16);\n\n        if (r.length === 1) r = '0' + r;\n        if (g.length === 1) g = '0' + g;\n        if (b.length === 1) b = '0' + b;\n        if (a.length === 1) a = '0' + a;\n\n        return '#' + r + g + b + a;\n    }\n\n    /**\n     * See\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color#value\n     */\n    get shortHex(): string {\n        let r = this.r.toString(16);\n        let g = this.g.toString(16);\n        let b = this.b.toString(16);\n\n        if (r.length === 1) r = '0' + r;\n        if (g.length === 1) g = '0' + g;\n        if (b.length === 1) b = '0' + b;\n\n        return '#' + r + g + b;\n    }\n\n    get rgba(): RGBAColor {\n        return {\n            r: this.r,\n            g: this.g,\n            b: this.b,\n            a: this.a,\n        };\n    }\n\n    get hsla(): HSLAColor {\n        const r = this.r / 255;\n        const g = this.g / 255;\n        const b = this.b / 255;\n\n        const cmin = Math.min(r, g, b);\n        const cmax = Math.max(r, g, b);\n        const delta = cmax - cmin;\n\n        let h = 0,\n            s = 0,\n            l = 0;\n\n        // calculate hue\n        if (delta === 0) {\n            h = 0;\n        } else if (cmax === r) {\n            h = ((g - b) / delta) % 6;\n        } else if (cmax === g) {\n            h = (b - r) / delta + 2;\n        } else {\n            h = (r - g) / delta + 4;\n        }\n\n        h = Math.round(h * 60);\n\n        // make negative hues positive behind 360°\n        if (h < 0) {\n            h = h + 360;\n        }\n\n        // calculate lightness\n        l = (cmax + cmin) / 2;\n\n        // calculate saturation\n        s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n        return {\n            h,\n            s: Math.round(s * 100),\n            l: Math.round(l * 100),\n        };\n    }\n\n    get complementary(): Color {\n        const { h, s, l, a } = this.hsla;\n        return Color.fromHSLA(h + 180, s, l, a);\n    }\n\n    opacity(opacity: number): Color {\n        validateRange(opacity, 0, 1);\n\n        return new Color(this.r, this.g, this.b, opacity);\n    }\n\n    lighten(percent: number): Color {\n        validateRange(percent, 0, 100);\n\n        const { h, s, a } = this.hsla;\n        const l = Math.min(100, this.hsla.l + percent);\n\n        return Color.fromHSLA(h, s, l, a);\n    }\n\n    darken(percent: number): Color {\n        validateRange(percent, 0, 100);\n\n        const { h, s, a } = this.hsla;\n        const l = Math.max(0, this.hsla.l - percent);\n\n        return Color.fromHSLA(h, s, l, a);\n    }\n\n    saturate(percent: number): Color {\n        validateRange(percent, 0, 100);\n\n        const { h, l, a } = this.hsla;\n        const s = Math.min(100, this.hsla.s + percent);\n\n        return Color.fromHSLA(h, s, l, a);\n    }\n\n    desaturate(percent: number): Color {\n        validateRange(percent, 0, 100);\n\n        const { h, l, a } = this.hsla;\n        const s = Math.max(0, this.hsla.s - percent);\n\n        return Color.fromHSLA(h, s, l, a);\n    }\n\n    static validateRGBA(color: unknown): asserts color is RGBAColor {\n        validateWithKey('r', color);\n        validateWithKey('g', color);\n        validateWithKey('b', color);\n        validateWithKey('a', color);\n        const { r, g, b, a } = color;\n\n        validateNumber(r);\n        validateNumber(g);\n        validateNumber(b);\n        validateNumber(a);\n\n        validateRange(r, 0, 255);\n        validateRange(g, 0, 255);\n        validateRange(b, 0, 255);\n        validateRange(a, 0, 1);\n    }\n\n    static validateHSLA(color: unknown): asserts color is HSLAColor {\n        validateWithKey('h', color);\n        validateWithKey('s', color);\n        validateWithKey('l', color);\n        const { h, s, l } = color;\n\n        validateNumber(h);\n        validateNumber(s);\n        validateNumber(l);\n\n        validateRange(h, 0, 255);\n        validateRange(s, 0, 100);\n        validateRange(l, 0, 100);\n    }\n\n    static linearPickerFromHSL(saturation: number, lightness: number, alpha: number, amount: number): Array<RGBAColor> {\n        const huedelta: number = Math.trunc(360 / amount);\n\n        return [...new Array(amount)].map((_: any, index: number) => {\n            const hue = index * huedelta;\n            return Color.fromHSLA(hue, saturation, lightness).rgba;\n        });\n    }\n}\n","/**\n * This utility will help us to generate styles for our components\n *\n * Neumorphism\n *  -   Elements have two shadows: one light and one dark.\n *  -   Background colors must be the same (or very similar) as the background color of the parent element\n *  -   Rounded edges are a defining quality.\n *  -   Elements can have an optional subtle border to improve contrast and make the edges a bit sharper\n *\n * CSS:\n * box-shadow: [horizontal offset] [vertical offset] [blur radius] [optional spread radius] [color];\n *\n * Read:\n * https://css-tricks.com/neumorphism-and-css/\n */\n\nimport { Color, RGBAColor } from './Color';\n\nconst PX_UNIT = 1;\nconst BLUR_SCALE = 1.5;\n\ninterface Params {\n    elevation: number;\n    color: RGBAColor;\n    inverted?: boolean;\n}\n\nexport enum Shapes {\n    CONVEX = 'Convex',\n    CONCAVE = 'Concave',\n    FLAT = 'Flat',\n}\n\nexport const shapes = Object.values(Shapes);\n\ntype ShadowGenerator = (params: Params) => string;\ntype FontColorGenerator = (backgroundColor: RGBAColor) => RGBAColor;\ntype BackgroundColorGenerator = (brandColor: RGBAColor) => RGBAColor;\ntype BackgroundGradientGenerator = (brandColor: RGBAColor) => string;\ntype ColorFromTextGenerator = (text: string) => RGBAColor;\n/**\n *\n * Neumorphism is based on shadows\n * @param params elevation and container color\n * @returns css box shadow property.\n */\nexport const generateShadow: ShadowGenerator = (params) => {\n    const { color, elevation, inverted } = params;\n\n    const lighterColor = Color.fromRGBA(color).lighten(10).opacity(0.6).hex;\n    const darkerColor = Color.fromRGBA(color).darken(10).opacity(0.6).hex;\n\n    const offsetL = -1 * Math.abs(elevation) * PX_UNIT;\n    const offsetD = Math.abs(elevation) * PX_UNIT;\n\n    const blurRadius = Math.abs(elevation * BLUR_SCALE * PX_UNIT);\n\n    const lightShadow = `${offsetL}px ${offsetL}px ${blurRadius}px ${lighterColor}`;\n    const darkShadow = `${offsetD}px ${offsetD}px ${blurRadius}px ${darkerColor}`;\n\n    return inverted ? `inset ${lightShadow}, inset ${darkShadow}` : `${lightShadow}, ${darkShadow}`;\n};\n\nexport const generateReadableFontColor: FontColorGenerator = (rgbaColor) => {\n    const bgColor = Color.fromRGBA(rgbaColor).complementary;\n\n    if (bgColor.hsla.l <= 50) {\n        return bgColor.lighten(50).rgba;\n    }\n\n    return bgColor.darken(50).rgba;\n};\n\nexport const generateBackgroundColor: BackgroundColorGenerator = (rgbaColor) => {\n    const color = Color.fromRGBA(rgbaColor).complementary;\n\n    if (color.hsla.l >= 50) {\n        return color.darken(50).desaturate(30).rgba;\n    }\n\n    return color.lighten(50).desaturate(30).rgba;\n};\n\nexport const generateFlatBackground: BackgroundGradientGenerator = (rgbaColor) => {\n    const hexColor = Color.fromRGBA(rgbaColor).shortHex;\n\n    return `linear-gradient(0deg, ${hexColor}, ${hexColor})`;\n};\n\nexport const generateConvexBackground: BackgroundGradientGenerator = (rgbaColor) => {\n    const from = Color.fromRGBA(rgbaColor).darken(10);\n    const to = Color.fromRGBA(rgbaColor).lighten(10);\n\n    return `linear-gradient(-45deg, ${from.shortHex}, ${to.shortHex}`;\n};\n\nexport const generateConcaveBackground: BackgroundGradientGenerator = (rgbaColor) => {\n    const from = Color.fromRGBA(rgbaColor).darken(10);\n    const to = Color.fromRGBA(rgbaColor).lighten(20);\n\n    return `linear-gradient(135deg, ${from.shortHex}, ${to.shortHex}`;\n};\n\nexport const generateColorFromString: ColorFromTextGenerator = (text) => {\n    const intHash = Array.from(text).reduce((hash: number, char: string) => {\n        return char.charCodeAt(0) + ((hash << 5) - hash);\n    }, 0);\n\n    const r = (intHash >> 8) & 0xff;\n    const g = (intHash >> 16) & 0xff;\n    const b = (intHash >> 24) & 0xff;\n    const generatedColor = new Color(r, g, b, 255);\n\n    return generatedColor.rgba;\n};\n","import React from 'react';\nimport { Color, RGBAColor } from '../utils/Color';\nimport { generateBackgroundColor, generateReadableFontColor } from '../utils/colorGeneration';\n\ntype ThemeGenerator = (color: RGBAColor) => Theme;\nexport interface Theme {\n    background: RGBAColor;\n    text: RGBAColor;\n    accent: RGBAColor;\n}\n\nconst generateTheme: ThemeGenerator = (color) => {\n    const defaultAccent: RGBAColor = color;\n    const defaultBackground: RGBAColor = generateBackgroundColor(defaultAccent);\n    const defaultText: RGBAColor = generateReadableFontColor(defaultBackground);\n\n    return {\n        background: defaultBackground,\n        text: defaultText,\n        accent: defaultAccent,\n    };\n};\n\nconst defaultTheme: Theme = generateTheme(Color.fromHEX('#92354c').rgba);\n\nexport interface ThemeContext {\n    theme: Theme;\n    setAccent: (newColor: RGBAColor) => void;\n}\n\nconst defaultContext: ThemeContext = {\n    theme: defaultTheme,\n    setAccent: (newColor: RGBAColor) => console.warn('Context not intialized'),\n};\n\nexport const Context = React.createContext<ThemeContext>(defaultContext);\n\nexport const Provider: React.FC = (props) => {\n    const [theme, setTheme] = React.useState<Theme>(defaultTheme);\n\n    const setAccent = (newColor: RGBAColor) => {\n        const newTheme = generateTheme(newColor);\n\n        setTheme(newTheme);\n    };\n\n    const value = {\n        theme,\n        setAccent,\n    };\n    return <Context.Provider value={value}>{props.children}</Context.Provider>;\n};\n","import React from 'react';\nimport { Context, ThemeContext } from './ThemeContext';\n\nexport const useTheme = (): ThemeContext => {\n    return React.useContext(Context);\n};\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color, RGBAColor } from '../../utils/Color';\nimport {\n    generateFlatBackground,\n    generateShadow,\n    generateConvexBackground,\n    Shapes,\n    generateConcaveBackground,\n} from '../../utils/colorGeneration';\nimport './Logo.scss';\n\ninterface LogoProps {\n    shape: string;\n}\n\nconst getBackground = (shape: string, bgColor: RGBAColor): string => {\n    switch (shape) {\n        case Shapes.FLAT:\n            return generateFlatBackground(bgColor);\n\n        case Shapes.CONVEX:\n            return generateConvexBackground(bgColor);\n\n        case Shapes.CONCAVE:\n            return generateConcaveBackground(bgColor);\n\n        default:\n            console.warn('TODO: assert unreachable');\n            break;\n    }\n\n    return '';\n};\n\nexport const Logo: React.FC<LogoProps> = (props) => {\n    const { shape } = props;\n    const { theme } = useTheme();\n\n    const accentColor = Color.fromRGBA(theme.accent);\n    const bgColor = Color.fromRGBA(theme.background);\n\n    const boxShadow = generateShadow({ color: bgColor.rgba, elevation: 2 });\n\n    const background = getBackground(shape, bgColor.rgba);\n    const animatedStyles = useSpring({\n        to: {\n            background,\n            boxShadow,\n            color: accentColor.shortHex,\n        },\n    });\n    return (\n        <animated.div className=\"logo\" style={animatedStyles}>\n            <h3 className='title'>Neumorphism</h3>\n            <small className='subtitle'>0xfafafa</small>\n        </animated.div>\n    );\n};\n","import React from 'react';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color, RGBAColor } from '../../utils/Color';\nimport { generateShadow } from '../../utils/colorGeneration';\nimport './ColorPicker.scss';\n\ninterface ColorPickerProps {\n    value: RGBAColor;\n    onChange: (value: RGBAColor) => void;\n}\nexport const ColorPicker: React.FC<ColorPickerProps> = (props) => {\n    const { value } = props;\n    const { theme } = useTheme();\n\n    const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        const newValue = Color.fromHEX(target.value).rgba\n        props.onChange(newValue);\n    };\n\n    const boxShadow = generateShadow({ color: theme.background, elevation: 1, inverted: false })\n    const invertedBoxShadow = generateShadow({ color: theme.background, elevation: 1, inverted: true })\n\n    const containerStyles = {\n        boxShadow: invertedBoxShadow,\n    }\n\n    const inputStyles = {\n        background: Color.fromRGBA(theme.background).shortHex,\n        '--bg': Color.fromRGBA(theme.background).shortHex,\n        '--boxShadow': boxShadow,\n    };\n\n\n    return <div className='colorPicker' style={containerStyles}>\n        <input\n            type=\"color\"\n            onChange={onChange}\n            value={Color.fromRGBA(value).shortHex}\n            style={inputStyles}\n        />\n    </div>\n};\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color } from '../../utils/Color';\nimport { generateShadow } from '../../utils/colorGeneration';\nimport './Container.scss';\n\ninterface ContainerProps {\n    elevation: number\n    inverted?: boolean\n    className?: string\n    isFake?: boolean\n}\n\nexport const Container: React.FC<ContainerProps> = (props) => {\n    const { elevation, inverted, isFake } = props;\n    const { theme } = useTheme();\n\n    const bgColor = Color.fromRGBA(theme.background);\n    const fontColor = Color.fromRGBA(theme.text);\n\n    const from = generateShadow({ color: bgColor.rgba, inverted, elevation: 0 });\n    const to = generateShadow({ color: bgColor.rgba, elevation, inverted });\n\n    const animatedStyles = useSpring({\n        from: {\n            boxShadow: from,\n            background: bgColor.shortHex,\n            borderColor: bgColor.shortHex,\n            color: fontColor.shortHex,\n        },\n        to: {\n            boxShadow: to,\n            background: bgColor.shortHex,\n            borderColor: bgColor.shortHex,\n            color: fontColor.shortHex,\n        }\n    });\n\n    const className = props.className\n        ? `container ${props.className}`\n        : 'container'\n\n    return (\n        <animated.div style={animatedStyles} className={className}>\n            {\n                isFake\n                    ? <span className=\"code\">\n                        <b>box-shadow:</b> {to}\n                    </span>\n                    : props.children\n            }\n        </animated.div>\n    );\n};\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color } from '../../utils/Color';\nimport { generateShadow } from '../../utils/colorGeneration';\nimport './RadioButton.scss';\n\ninterface RadioButtonProps {\n    options: Array<string>;\n    value: string;\n    onChange: (value: string) => void;\n}\nexport const RadioButton: React.FC<RadioButtonProps> = (props) => {\n    const { value, options } = props;\n    const { theme } = useTheme();\n\n    const onSelect = (event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        const newValue = target.value;\n        props.onChange(newValue);\n    };\n\n    const containerStyles = {\n        boxShadow: generateShadow({ color: theme.background, elevation: 4, inverted: true }),\n    };\n\n    // for grouping\n    const radioButtonName = options.join('-');\n    return (\n        <div className=\"radio\" style={containerStyles} onChange={onSelect}>\n            {options.map((option, index) => {\n                const key = `${option}-${index}`;\n\n                return <Option key={key} value={option} isSelected={option === value} name={radioButtonName} />;\n            })}\n        </div>\n    );\n};\n\ninterface OptionProps {\n    value: string;\n    name: string;\n    isSelected: boolean;\n}\n\nconst Option: React.FC<OptionProps> = (props) => {\n    const { value, name, isSelected } = props;\n    const { theme } = useTheme();\n\n    const selectedShadow = generateShadow({ color: theme.background, elevation: 0 });\n    const unselectedShadow = generateShadow({ color: theme.background, elevation: 3 });\n\n    const activeColor = Color.fromRGBA(theme.accent).shortHex;\n    const inactiveColor = Color.fromRGBA(theme.text).shortHex;\n\n    const animatedStyles = useSpring({\n        to: {\n            boxShadow: isSelected ? selectedShadow : unselectedShadow,\n            color: isSelected ? activeColor : inactiveColor,\n        },\n    });\n\n    const activeIndicatorStyles = useSpring({\n        to: {\n            width: isSelected ? '32px' : '0px',\n            borderColor: activeColor\n        },\n    });\n\n    const id = `radiobutton-${value}`;\n\n    return (\n        <animated.label style={animatedStyles} className={'option'} htmlFor={id}>\n            <input id={id} type=\"radio\" aria-label={value} value={value} name={name} />\n            {isSelected && <animated.div style={activeIndicatorStyles} className='activeIndicator' />}\n            <span>\n                {value}\n            </span>\n        </animated.label>\n    );\n};\n","import React from 'react';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color } from '../../utils/Color';\nimport { generateShadow } from '../../utils/colorGeneration';\nimport './Slider.scss';\n\ninterface SliderProps {\n    max: number;\n    min: number;\n    step?: number;\n    value: number;\n    onChange: (value: number) => void;\n}\nexport const Slider: React.FC<SliderProps> = (props) => {\n    const { value, max, min, step = 1 } = props;\n    const { theme } = useTheme();\n\n    const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        const newValue = parseInt(target.value)\n        props.onChange(newValue);\n    };\n\n    const boxShadow = generateShadow({ color: theme.background, elevation: 1, inverted: false })\n    const invertedBoxShadow = generateShadow({ color: theme.background, elevation: 2, inverted: true })\n\n    const containerStyles = {\n        borderColor: Color.fromRGBA(theme.accent).shortHex,\n    }\n\n    const inputStyles = {\n        boxShadow: invertedBoxShadow,\n        background: Color.fromRGBA(theme.background).shortHex,\n        '--bg': Color.fromRGBA(theme.text).shortHex,\n        '--boxShadow': boxShadow\n    };\n\n    return <div className='slider' style={containerStyles}>\n        <input\n            type='range'\n            onChange={onChange}\n            value={value}\n            style={inputStyles}\n            max={max}\n            min={min}\n            step={step}\n        />\n    </div>\n};\n","import React from 'react';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color } from '../../utils/Color';\nimport { generateColorFromString, generateShadow } from '../../utils/colorGeneration';\nimport './TextInput.scss';\n\ninterface TextInputProps extends React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n> {\n    onTextChange: (value: string) => void;\n}\nexport const TextInput: React.FC<TextInputProps> = (props) => {\n    const { value, onTextChange } = props;\n    const { theme } = useTheme();\n\n    const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement;\n        const newValue = target.value\n\n        generateColorFromString(newValue)\n        onTextChange(newValue);\n    };\n\n    const boxShadow = generateShadow({\n        color: theme.background,\n        elevation: 4,\n        inverted: true\n    })\n    const inputStyles = {\n        boxShadow,\n        background: Color.fromRGBA(theme.background).shortHex,\n        color: Color.fromRGBA(theme.text).shortHex,\n        '--border': Color.fromRGBA(theme.accent).shortHex\n    }\n\n\n    return <input\n        type='text'\n        onChange={onChange}\n        value={value}\n        style={inputStyles}\n        className='textInput'\n    />\n};\n","import { useEffect, useRef } from 'react';\n\ntype Callback<T> = (args: T) => void;\n\nconst useTimeout = (callback: Callback<any>, args: any, delay: number): void => {\n    const savedCallback = useRef(callback);\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    useEffect(() => {\n        const id = setTimeout(() => savedCallback.current(args), delay);\n\n        return () => clearTimeout(id);\n    }, [delay, args]);\n};\n\nexport default useTimeout;\n","import React from 'react';\nimport { useTheme } from '../../theme/useTheme';\nimport { Color, RGBAColor } from '../../utils/Color';\nimport { generateColorFromString, shapes } from '../../utils/colorGeneration';\nimport { Logo } from '../Logo/Logo';\nimport { ColorPicker } from '../ColorPicker/ColorPicker';\nimport { Container } from '../Container/Container';\nimport { RadioButton } from '../RadioButton/RadioButton';\nimport { Slider } from '../Slider/Slider';\nimport { TextInput } from '../TextInput/TextInput';\nimport './Playground.scss';\nimport useTimeout from '../../utils/useTimeout';\n\nconst defaultShape = shapes[2];\nexport const Playground = () => {\n    const { theme, setAccent: setBrand } = useTheme();\n\n    const [elevation, setElevation] = React.useState<number>(1);\n    const [shape, setShape] = React.useState<string>(defaultShape);\n    const [text, setText] = React.useState<string>('Some text...');\n\n    const onElevationChange = (newElevation: number) => {\n        setElevation(newElevation);\n    };\n\n    const onColorChange = (newColor: RGBAColor) => {\n        setBrand(Color.fromRGBA(newColor).rgba);\n    };\n\n    const onTextChange = (newText: string): void => {\n        setText(newText)\n\n\n    }\n\n    const onShapeChange = (newShape: string) => {\n        setShape(newShape);\n    };\n\n    const appStyles = {\n        background: Color.fromRGBA(theme.background).shortHex,\n        color: Color.fromRGBA(theme.text).shortHex,\n    };\n\n\n    const updateTheme = (newText: string): void => {\n        const newAccent: RGBAColor = generateColorFromString(newText)\n        setBrand(newAccent)\n    }\n\n    useTimeout(updateTheme, text, 300)\n\n    return (\n        <div className=\"playground\" style={appStyles}>\n\n            <Logo shape={shape} />\n            <Container elevation={3} inverted >\n\n                <p>\n                    <b>Radio button</b>\n                    <small>- Change the brand shape -</small>\n                </p>\n                <RadioButton options={shapes} value={shape} onChange={onShapeChange} />\n\n                <br /><br />\n\n                <p>\n                    <b>Color picker</b>\n                    <small>- Choose an accent -</small>\n                </p>\n                <ColorPicker value={theme.accent} onChange={onColorChange} />\n\n                <br /><br />\n\n                <p>\n                    <b>Text input</b>\n                    <small>- Type to generate a new theme -</small>\n                </p>\n                <TextInput value={text} onTextChange={onTextChange} />\n\n                <br /><br />\n\n                <p>\n                    <b>Slider</b>\n                    <small>- Change the elevation of the container shadows -</small>\n                </p>\n                <Slider step={1} min={0} max={5} value={elevation} onChange={onElevationChange} />\n\n                <br /><br />\n\n                <b>Container</b>\n                <Container elevation={elevation} isFake />\n\n                <br /><br />\n\n                <b>Inverted container:</b>\n                <Container elevation={elevation} inverted isFake />\n            </Container>\n        </div >\n    );\n};\n","import React from 'react';\nimport { Playground } from './components/Playground/Playground';\nimport { Provider as ThemeProvider } from './theme/ThemeContext';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n    return (\n        <ThemeProvider>\n            <Playground />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}